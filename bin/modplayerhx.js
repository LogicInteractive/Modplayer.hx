// Generated by Haxe 4.2.1+bf9ff69
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var m = new hxmod_ModPlayer();
	m.load("mod.overload");
	window.document.getElementById("startButton").addEventListener("click",function() {
		m.play();
	});
	window.document.getElementById("stopButton").addEventListener("click",function() {
		m.stop();
	});
};
Math.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var hxmod_ModPlayer = function() {
	this.chvu = new Float32Array(32);
	this.samplenames = [];
	this.patterns = 0;
	this.channels = 0;
	this.songlen = 0;
	this.signature = "....";
	this.title = "";
	this.player = null;
	this.bufferlen = 4096;
	this.samplerate = 44100;
	this.buffer = 0;
	this.delayload = 0;
	this.delayfirst = 0;
	this.bufferstodelay = 4;
	this.autostart = false;
	this.endofsong = false;
	this.filter = false;
	this.amiga500 = false;
	this.mixval = 8.0;
	this.separation = 1;
	this.repeat = false;
	this.paused = false;
	this.playing = false;
	this.loading = false;
	this.state = "initializing..";
	this.format = "s3m";
	this.url = "";
	this.supportedformats = ["mod","s3m","xm"];
};
hxmod_ModPlayer.__name__ = true;
hxmod_ModPlayer.prototype = {
	load: function(url) {
		var _gthis = this;
		this.url = url;
		var ext = StringTools.trim(url.split(".").pop().toLowerCase());
		if(this.supportedformats.indexOf(ext) == -1) {
			ext = StringTools.trim(url.split("/").pop().split(".").shift().toLowerCase());
			if(this.supportedformats.indexOf(ext) == -1) {
				return false;
			}
		}
		this.format = ext;
		if(ext == "mod") {
			this.player = new hxmod_Protracker();
		}
		this.set_state("loading..");
		var request = new XMLHttpRequest();
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		this.loading = true;
		request.onprogress = function(oe) {
			_gthis.set_state("loading (" + Math.floor(100 * oe.loaded / oe.total) + "%)..");
		};
		request.onload = function() {
			var elements = request.response;
			var array = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var buffer = this1;
			_gthis.set_state("parsing..");
			if(_gthis.player.parse(buffer)) {
				_gthis.title = _gthis.player.title;
				_gthis.signature = _gthis.player.signature;
				_gthis.songlen = _gthis.player.songlen;
				_gthis.channels = _gthis.player.channels;
				_gthis.patterns = _gthis.player.patterns;
				_gthis.filter = _gthis.player.filter;
				if(_gthis.context != null) {
					_gthis.setfilter(_gthis.filter);
				}
				_gthis.mixval = _gthis.player.mixval;
				_gthis.samplenames.length = 32;
				_gthis.samplenames[0] = "";
				_gthis.samplenames[1] = "";
				_gthis.samplenames[2] = "";
				_gthis.samplenames[3] = "";
				_gthis.samplenames[4] = "";
				_gthis.samplenames[5] = "";
				_gthis.samplenames[6] = "";
				_gthis.samplenames[7] = "";
				_gthis.samplenames[8] = "";
				_gthis.samplenames[9] = "";
				_gthis.samplenames[10] = "";
				_gthis.samplenames[11] = "";
				_gthis.samplenames[12] = "";
				_gthis.samplenames[13] = "";
				_gthis.samplenames[14] = "";
				_gthis.samplenames[15] = "";
				_gthis.samplenames[16] = "";
				_gthis.samplenames[17] = "";
				_gthis.samplenames[18] = "";
				_gthis.samplenames[19] = "";
				_gthis.samplenames[20] = "";
				_gthis.samplenames[21] = "";
				_gthis.samplenames[22] = "";
				_gthis.samplenames[23] = "";
				_gthis.samplenames[24] = "";
				_gthis.samplenames[25] = "";
				_gthis.samplenames[26] = "";
				_gthis.samplenames[27] = "";
				_gthis.samplenames[28] = "";
				_gthis.samplenames[29] = "";
				_gthis.samplenames[30] = "";
				_gthis.samplenames[31] = "";
				var _g = 0;
				while(_g < 32) {
					var i = _g++;
					if(!(_gthis.format == "xm" || _gthis.format == "it")) {
						var _g1 = 0;
						var _g2 = _gthis.player.sample.length;
						while(_g1 < _g2) {
							var p = _g1++;
							if(_gthis.player.sample[i] != null) {
								_gthis.samplenames[p] = _gthis.player.sample[i].name;
							}
						}
					}
				}
				_gthis.set_state("ready.");
				_gthis.loading = false;
				if(_gthis.onReady != null) {
					_gthis.onReady();
				}
				if(_gthis.autostart) {
					_gthis.play();
				}
			} else {
				_gthis.set_state("error!");
				_gthis.loading = false;
			}
		};
		request.send();
		return true;
	}
	,play: function() {
		if(this.loading) {
			return false;
		}
		if(this.player != null) {
			if(this.context == null) {
				this.createContext();
			}
			this.player.samplerate = this.samplerate;
			if(this.context != null) {
				this.setfilter(this.player.filter);
			}
			if(this.player.paused) {
				this.player.paused = false;
				return true;
			}
			this.endofsong = false;
			this.player.endofsong = false;
			this.player.paused = false;
			this.player.initialize();
			this.player.flags = 3;
			this.player.playing = true;
			this.playing = true;
			var elements = this.player.channels;
			var array = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.chvu = this1;
			var _g = 0;
			var _g1 = this.player.channels;
			while(_g < _g1) {
				var i = _g++;
				this.chvu[i] = 0.0;
			}
			if(this.onPlay != null) {
				this.onPlay();
			}
			this.player.delayfirst = this.bufferstodelay;
			return true;
		} else {
			return false;
		}
	}
	,pause: function() {
		if(this.player != null) {
			if(this.player.paused) {
				this.player.paused = true;
			} else {
				this.player.paused = false;
			}
		}
	}
	,stop: function() {
		this.paused = false;
		this.playing = false;
		if(this.player != null) {
			this.player.paused = false;
			this.player.playing = false;
			this.player.delayload = 1;
		}
		if(this.onStop != null) {
			this.onStop();
		}
	}
	,stopaudio: function(st) {
		if(this.player != null) {
			this.player.playing = st;
		}
	}
	,jump: function(step) {
		if(this.player != null) {
			this.player.tick = 0;
			this.player.row = 0;
			this.player.position += step;
			this.player.flags = 3;
			if(this.player.position < 0) {
				this.player.position = 0;
			}
			if(this.player.position >= this.player.songlen) {
				this.stop();
			}
		}
		this.position = this.player.position;
		this.row = this.player.row;
	}
	,setrepeat: function(rep) {
		this.repeat = rep;
		if(this.player != null) {
			this.player.repeat = rep;
		}
	}
	,setseparation: function(sep) {
		this.separation = sep;
		if(this.player != null) {
			this.player.separation = sep;
		}
	}
	,setautostart: function(st) {
		this.autostart = st;
	}
	,setamigamodel: function(amiga) {
		if(amiga == "600" || amiga == "1200" || amiga == "4000") {
			this.amiga500 = false;
			if(this.filterNode != null) {
				this.filterNode.frequency.value = 22050;
			}
		} else {
			this.amiga500 = true;
			if(this.filterNode != null) {
				this.filterNode.frequency.value = 6000;
			}
		}
	}
	,setfilter: function(f) {
		if(f) {
			this.lowpassNode.frequency.value = 3275;
		} else {
			this.lowpassNode.frequency.value = 24000;
		}
		this.filter = f;
		if(this.player != null) {
			this.player.filter = f;
		}
	}
	,hassyncevents: function() {
		if(this.player != null) {
			return this.player.syncqueue.length != 0;
		}
		return false;
	}
	,popsyncevent: function() {
		if(this.player != null) {
			return this.player.syncqueue.pop();
		}
		return null;
	}
	,currentpattern: function() {
		if(this.player != null) {
			return this.player.patterntable[this.player.position];
		}
		return null;
	}
	,patterndata: function(pn) {
		var i = 0;
		var c = 0;
		var patt = null;
		if(this.format == "mod") {
			var elements = this.player.pattern_unpack[pn];
			var array = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			patt = this1;
			var _g = 0;
			while(_g < 64) {
				var i = _g++;
				var _g1 = 0;
				var _g2 = this.player.channels;
				while(_g1 < _g2) {
					var c = _g1++;
					if(patt[i * 5 * this.channels + c * 5 + 3] == 0 && patt[i * 5 * this.channels + c * 5 + 4] == 0) {
						patt[i * 5 * this.channels + c * 5 + 3] = 46;
					} else {
						var _g3 = i * 5 * this.channels + c * 5 + 3;
						var _g4 = patt;
						_g4[_g3] = _g4[_g3] + 55;
						if(UInt.gt(65,patt[i * 5 * this.channels + c * 5 + 3])) {
							var _g5 = i * 5 * this.channels + c * 5 + 3;
							var _g6 = patt;
							_g6[_g5] = _g6[_g5] - 7;
						}
					}
				}
			}
		} else if(this.format == "s3m") {
			var elements = this.player.pattern[pn];
			var array = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			patt = this1;
			var _g = 0;
			while(_g < 64) {
				var i = _g++;
				var _g1 = 0;
				var _g2 = this.player.channels;
				while(_g1 < _g2) {
					var c = _g1++;
					if(patt[i * 5 * this.channels + c * 5 + 3] == 255) {
						patt[i * 5 * this.channels + c * 5 + 3] = 46;
					} else {
						var _g3 = i * 5 * this.channels + c * 5 + 3;
						var _g4 = patt;
						_g4[_g3] = _g4[_g3] + 64;
					}
				}
			}
		} else if(this.format == "xm") {
			var elements = this.player.pattern[pn];
			var array = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			patt = this1;
			var _g = 0;
			var _g1 = this.player.patternlen[pn];
			while(_g < _g1) {
				var i = _g++;
				var _g2 = 0;
				var _g3 = this.player.channels;
				while(_g2 < _g3) {
					var c = _g2++;
					if(UInt.gt(97,patt[i * 5 * this.channels + c * 5])) {
						patt[i * 5 * this.channels + c * 5] = UInt.toFloat(patt[i * 5 * this.channels + c * 5]) % UInt.toFloat(12) | 0 | Math.floor(UInt.toFloat(patt[i * 5 * this.channels + c * 5]) / UInt.toFloat(12)) << 4;
					}
					if(patt[i * 5 * this.channels + c * 5 + 3] == 255) {
						patt[i * 5 * this.channels + c * 5 + 3] = 46;
					} else if(UInt.gt(10,patt[i * 5 * this.channels + c * 5 + 3])) {
						var _g4 = i * 5 * this.channels + c * 5 + 3;
						var _g5 = patt;
						_g5[_g4] = _g5[_g4] + 48;
					} else {
						var _g6 = i * 5 * this.channels + c * 5 + 3;
						var _g7 = patt;
						_g7[_g6] = _g7[_g6] + 55;
					}
				}
			}
		}
		return patt;
	}
	,noteon: function(ch) {
		if(ch >= this.channels) {
			return 0;
		}
		return this.player.channel[ch].noteon;
	}
	,currentsample: function(ch) {
		if(ch >= this.channels) {
			return 0;
		}
		if(this.format == "xm" || this.format == "it") {
			return this.player.channel[ch].voiceperiod;
		}
		return this.player.channel[ch].sample;
	}
	,currentpattlen: function() {
		if(this.format == "mod" || this.format == "s3m") {
			return 64;
		}
		return this.player.patternlen[this.player.patterntable[this.player.position]];
	}
	,createContext: function() {
		this.context = new AudioContext();
		this.samplerate = this.context.sampleRate;
		this.bufferlen = this.samplerate > 44100 ? 4096 : 2048;
		this.filterNode = this.context.createBiquadFilter();
		if(this.amiga500) {
			this.filterNode.frequency.value = 6000;
		} else {
			this.filterNode.frequency.value = 22050;
		}
		this.lowpassNode = this.context.createBiquadFilter();
		this.setfilter(this.filter);
		this.mixerNode = this.context.createScriptProcessor(this.bufferlen,1,2);
		this.mixerNode.module = this;
		this.mixerNode.onaudioprocess = $bind(this,this.mix);
		this.mixerNode.connect(this.filterNode);
		this.filterNode.connect(this.lowpassNode);
		this.lowpassNode.connect(this.context.destination);
		this.mixerNode.onaudioprocess = $bind(this,this.mix);
	}
	,mix: function(ape) {
		var mod = null;
		if(ape.srcElement) {
			mod = ape.srcElement.module;
		}
		if(mod.player != null && mod.delayfirst == 0) {
			mod.player.repeat = mod.repeat;
			var bufs = [ape.outputBuffer.getChannelData(0),ape.outputBuffer.getChannelData(1)];
			var buflen = ape.outputBuffer.length;
			mod.player.mix(mod.player,bufs,buflen);
			var array = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(2);
			var outp = this1;
			var _g = 0;
			var _g1 = buflen;
			while(_g < _g1) {
				var s = _g++;
				outp[0] = bufs[0][s];
				outp[1] = bufs[1][s];
				if(mod.separation) {
					var t = outp[0];
					if(mod.separation == 2) {
						outp[0] = outp[0] * 0.5 + outp[1] * 0.5;
						outp[1] = outp[1] * 0.5 + t * 0.5;
					} else {
						outp[0] = outp[0] * 0.65 + outp[1] * 0.35;
						outp[1] = outp[1] * 0.65 + t * 0.35;
					}
				}
				outp[0] /= mod.mixval;
				outp[0] = 0.5 * (Math.abs(outp[0] + 0.975) - Math.abs(outp[0] - 0.975));
				outp[1] /= mod.mixval;
				outp[1] = 0.5 * (Math.abs(outp[1] + 0.975) - Math.abs(outp[1] - 0.975));
				bufs[0][s] = outp[0];
				bufs[1][s] = outp[1];
			}
			mod.row = mod.player.row;
			mod.position = mod.player.position;
			mod.speed = mod.player.speed;
			mod.bpm = mod.player.bpm;
			mod.endofsong = mod.player.endofsong;
			if(mod.player.filter != mod.filter) {
				mod.setfilter(mod.player.filter);
			}
			if(mod.endofsong && mod.playing) {
				mod.stop();
			}
			if(mod.delayfirst > 0) {
				mod.delayfirst--;
			}
			mod.delayload = 0;
			var _g = 0;
			var _g1 = mod.player.channels;
			while(_g < _g1) {
				var i = _g++;
				mod.chvu[i] = mod.chvu[i] * 0.25 + mod.player.chvu[i] * 0.75;
				mod.player.chvu[i] = 0.0;
			}
		}
	}
	,set_state: function(value) {
		console.log("src/hxmod/ModPlayer.hx:635:",value);
		return this.state = value;
	}
};
var hxmod_Protracker = function() {
	this.patterntable = new ArrayBuffer(128);
	this.vibratotable = [];
	this.finetunetable = new Float32Array(16);
	var array = [856,808,762,720,678,640,604,570,538,508,480,453,428,404,381,360,339,320,302,285,269,254,240,226,214,202,190,180,170,160,151,143,135,127,120,113];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	this.baseperiodtable = this1;
	this.samplerate = 44100;
	this.syncqueue = [];
	this.mixval = 4.0;
	this.filter = false;
	this.repeat = false;
	this.paused = false;
	this.playing = false;
	this.effects_t0 = [$bind(this,this.effect_t0_0),$bind(this,this.effect_t0_1),$bind(this,this.effect_t0_2),$bind(this,this.effect_t0_3),$bind(this,this.effect_t0_4),$bind(this,this.effect_t0_5),$bind(this,this.effect_t0_6),$bind(this,this.effect_t0_7),$bind(this,this.effect_t0_8),$bind(this,this.effect_t0_9),$bind(this,this.effect_t0_a),$bind(this,this.effect_t0_b),$bind(this,this.effect_t0_c),$bind(this,this.effect_t0_d),$bind(this,this.effect_t0_e),$bind(this,this.effect_t0_f)];
	this.effects_t0_e = [$bind(this,this.effect_t0_e0),$bind(this,this.effect_t0_e1),$bind(this,this.effect_t0_e2),$bind(this,this.effect_t0_e3),$bind(this,this.effect_t0_e4),$bind(this,this.effect_t0_e5),$bind(this,this.effect_t0_e6),$bind(this,this.effect_t0_e7),$bind(this,this.effect_t0_e8),$bind(this,this.effect_t0_e9),$bind(this,this.effect_t0_ea),$bind(this,this.effect_t0_eb),$bind(this,this.effect_t0_ec),$bind(this,this.effect_t0_ed),$bind(this,this.effect_t0_ee),$bind(this,this.effect_t0_ef)];
	this.effects_t1 = [$bind(this,this.effect_t1_0),$bind(this,this.effect_t1_1),$bind(this,this.effect_t1_2),$bind(this,this.effect_t1_3),$bind(this,this.effect_t1_4),$bind(this,this.effect_t1_5),$bind(this,this.effect_t1_6),$bind(this,this.effect_t1_7),$bind(this,this.effect_t1_8),$bind(this,this.effect_t1_9),$bind(this,this.effect_t1_a),$bind(this,this.effect_t1_b),$bind(this,this.effect_t1_c),$bind(this,this.effect_t1_d),$bind(this,this.effect_t1_e),$bind(this,this.effect_t1_f)];
	this.effects_t1_e = [$bind(this,this.effect_t1_e0),$bind(this,this.effect_t1_e1),$bind(this,this.effect_t1_e2),$bind(this,this.effect_t1_e3),$bind(this,this.effect_t1_e4),$bind(this,this.effect_t1_e5),$bind(this,this.effect_t1_e6),$bind(this,this.effect_t1_e7),$bind(this,this.effect_t1_e8),$bind(this,this.effect_t1_e9),$bind(this,this.effect_t1_ea),$bind(this,this.effect_t1_eb),$bind(this,this.effect_t1_ec),$bind(this,this.effect_t1_ed),$bind(this,this.effect_t1_ee),$bind(this,this.effect_t1_ef)];
	this.clearsong();
	this.initialize();
	var _g = 0;
	while(_g < 16) {
		var t = _g++;
		this.finetunetable[t] = Math.pow(2,(t - 8) / 12 / 8);
	}
	var _g = 0;
	while(_g < 4) {
		var t = _g++;
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this1 = new Float32Array(64);
		this.vibratotable[t] = this1;
		var _g1 = 0;
		while(_g1 < 64) {
			var i = _g1++;
			switch(t) {
			case 0:
				this.vibratotable[t][i] = 127 * Math.sin(Math.PI * 2 * (i / 64));
				break;
			case 1:
				this.vibratotable[t][i] = 127 - 4 * i;
				break;
			case 2:
				this.vibratotable[t][i] = i < 32 ? 127 : -127;
				break;
			case 3:
				this.vibratotable[t][i] = (1 - 2 * Math.random()) * 127;
				break;
			default:
			}
		}
	}
};
hxmod_Protracker.__name__ = true;
hxmod_Protracker.prototype = {
	clearsong: function() {
		this.title = "";
		this.signature = "";
		this.songlen = 1;
		this.repeatpos = 0;
		this.patterntable = new ArrayBuffer(128);
		var _g = 0;
		while(_g < 128) {
			var i = _g++;
			this.patterntable[i] = 0;
		}
		this.channels = 4;
		this.sample = [];
		this.samples = 31;
		var _g = 0;
		while(_g < 31) {
			var i = _g++;
			this.sample[i] = { };
			this.sample[i].name = "";
			this.sample[i].length = 0;
			this.sample[i].finetune = 0;
			this.sample[i].volume = 64;
			this.sample[i].loopstart = 0;
			this.sample[i].looplength = 0;
			this.sample[i].data = 0;
		}
		this.patterns = 0;
		this.pattern = [];
		this.note = [];
		this.pattern_unpack = [];
		this.looprow = 0;
		this.loopstart = 0;
		this.loopcount = 0;
		this.patterndelay = 0;
		this.patternwait = 0;
	}
	,initialize: function() {
		this.syncqueue = [];
		this.tick = 0;
		this.position = 0;
		this.row = 0;
		this.offset = 0;
		this.flags = 0;
		this.speed = 6;
		this.bpm = 125;
		this.breakrow = 0;
		this.patternjump = 0;
		this.patterndelay = 0;
		this.patternwait = 0;
		this.endofsong = false;
		this.channel = [];
		var _g = 0;
		var _g1 = this.channels;
		while(_g < _g1) {
			var i = _g++;
			this.channel[i] = { sample : 0, period : 214, voiceperiod : 214, note : 24, volume : 64, command : 0, data : 0, samplepos : 0, samplespeed : 0, flags : 0, noteon : 0, slidespeed : 0, slideto : 214, slidetospeed : 0, arpeggio : 0, semitone : 12, vibratospeed : 0, vibratodepth : 0, vibratopos : 0, vibratowave : 0, instrument : 0};
		}
	}
	,parse: function(buffer) {
		var j;
		var c;
		this.signature += String.fromCodePoint(buffer[1080]);
		this.signature += String.fromCodePoint(buffer[1081]);
		this.signature += String.fromCodePoint(buffer[1082]);
		this.signature += String.fromCodePoint(buffer[1083]);
		switch(this.signature) {
		case "28CH":
			this.channels = 28;
			break;
		case "6CHN":
			this.channels = 6;
			break;
		case "4CHN":case "FLT4":case "M!K!":case "M.K.":
			break;
		case "8CHN":case "FLT8":
			this.channels = 8;
			break;
		default:
			return false;
		}
		var array = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1 = new Float32Array(128);
		this.chvu = this1;
		var _g = 0;
		var _g1 = this.channels;
		while(_g < _g1) {
			var i = _g++;
			this.chvu[i] = 0.0;
		}
		var i = 0;
		while(buffer[i] != null && i < 20) {
			var code = buffer[i++];
			this.title += String.fromCodePoint(code);
		}
		var _g = 0;
		var _g1 = this.samples;
		while(_g < _g1) {
			var i = _g++;
			var st = 20 + i * 30;
			j = 0;
			while(buffer[st + j] != null && j < 22) {
				this.sample[i].name += UInt.gt(buffer[st + j],31) && UInt.gt(127,buffer[st + j]) ? String.fromCodePoint(buffer[st + j]) : " ";
				++j;
			}
			this.sample[i].length = 2 * (buffer[st + 22] * 256 + buffer[st + 23]);
			this.sample[i].finetune = buffer[st + 24];
			if(this.sample[i].finetune > 7) {
				this.sample[i].finetune -= 16;
			}
			this.sample[i].volume = buffer[st + 25];
			this.sample[i].loopstart = 2 * (buffer[st + 26] * 256 + buffer[st + 27]);
			this.sample[i].looplength = 2 * (buffer[st + 28] * 256 + buffer[st + 29]);
			if(this.sample[i].looplength == 2) {
				this.sample[i].looplength = 0;
			}
			if(this.sample[i].loopstart > this.sample[i].length) {
				this.sample[i].loopstart = 0;
				this.sample[i].looplength = 0;
			}
		}
		this.songlen = buffer[950];
		if(buffer[951] != 127) {
			this.repeatpos = buffer[951];
		}
		var _g = 0;
		while(_g < 128) {
			var i = _g++;
			this.patterntable[i] = buffer[952 + i];
			if(this.patterntable[i] > this.patterns) {
				this.patterns = this.patterntable[i];
			}
		}
		this.patterns += 1;
		var patlen = 256 * this.channels;
		this.pattern = [];
		this.note = [];
		this.pattern_unpack = [];
		var _g = 0;
		var _g1 = this.patterns;
		while(_g < _g1) {
			var i = _g++;
			var array = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(patlen != null) {
				this1 = new Uint8Array(patlen);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			this.pattern[i] = this1;
			var elements = this.channels * 64;
			var array1 = null;
			var view1 = null;
			var buffer2 = null;
			var len1 = null;
			var this2;
			if(elements != null) {
				this2 = new Uint8Array(elements);
			} else if(array1 != null) {
				this2 = new Uint8Array(array1);
			} else if(view1 != null) {
				this2 = new Uint8Array(view1);
			} else if(buffer2 != null) {
				if(len1 == null) {
					this2 = new Uint8Array(buffer2,0);
				} else {
					this2 = new Uint8Array(buffer2,0,len1);
				}
			} else {
				this2 = null;
			}
			this.note[i] = this2;
			var elements1 = this.channels * 64 * 5;
			var array2 = null;
			var view2 = null;
			var buffer3 = null;
			var len2 = null;
			var this3;
			if(elements1 != null) {
				this3 = new Uint8Array(elements1);
			} else if(array2 != null) {
				this3 = new Uint8Array(array2);
			} else if(view2 != null) {
				this3 = new Uint8Array(view2);
			} else if(buffer3 != null) {
				if(len2 == null) {
					this3 = new Uint8Array(buffer3,0);
				} else {
					this3 = new Uint8Array(buffer3,0,len2);
				}
			} else {
				this3 = null;
			}
			this.pattern_unpack[i] = this3;
			var _g2 = 0;
			var _g3 = patlen;
			while(_g2 < _g3) {
				var j = _g2++;
				this.pattern[i][j] = buffer[1084 + i * patlen + j];
			}
			var _g4 = 0;
			while(_g4 < 64) {
				var j1 = _g4++;
				var _g5 = 0;
				var _g6 = this.channels;
				while(_g5 < _g6) {
					var c = _g5++;
					this.note[i][j1 * this.channels + c] = 0;
					var n = (this.pattern[i][j1 * 4 * this.channels + c * 4] & 15) << 8 | this.pattern[i][j1 * 4 * this.channels + c * 4 + 1];
					var _g7 = 0;
					var _g8 = this.baseperiodtable.length;
					while(_g7 < _g8) {
						var np = _g7++;
						if(n == this.baseperiodtable[np]) {
							this.note[i][j1 * this.channels + c] = np;
						}
					}
				}
			}
			var _g9 = 0;
			while(_g9 < 64) {
				var j2 = _g9++;
				var _g10 = 0;
				var _g11 = this.channels;
				while(_g10 < _g11) {
					var c1 = _g10++;
					var pp = j2 * 4 * this.channels + c1 * 4;
					var ppu = j2 * 5 * this.channels + c1 * 5;
					var n1 = (this.pattern[i][pp] & 15) << 8 | this.pattern[i][pp + 1];
					if(n1 != null) {
						n1 = this.note[i][j2 * this.channels + c1];
						n1 = n1 % 12 | Math.floor(n1 / 12) + 2 << 4;
					}
					this.pattern_unpack[i][ppu] = n1 != null ? n1 : 255;
					this.pattern_unpack[i][ppu + 1] = this.pattern[i][pp] & 240 | this.pattern[i][pp + 2] >> 4;
					this.pattern_unpack[i][ppu + 2] = 255;
					this.pattern_unpack[i][ppu + 3] = this.pattern[i][pp + 2] & 15;
					this.pattern_unpack[i][ppu + 4] = this.pattern[i][pp + 3];
				}
			}
		}
		var sst = 1084 + this.patterns * patlen;
		var _g = 0;
		var _g1 = this.samples;
		while(_g < _g1) {
			var i = _g++;
			var elements = this.sample[i].length;
			var array = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Float32Array(buffer1,0);
				} else {
					this1 = new Float32Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			this.sample[i].data = this1;
			var _g2 = 0;
			var _g3 = this.sample[i].length;
			while(_g2 < _g3) {
				var j = _g2++;
				var q = UInt.toFloat(buffer[sst + j]);
				if(q < 128) {
					q /= 128.0;
				} else {
					q = (q - 128) / 128.0 - 1.0;
				}
				this.sample[i].data[j] = q;
			}
			sst += this.sample[i].length;
		}
		this.filter = false;
		var _g = 0;
		var _g1 = this.channels;
		while(_g < _g1) {
			var ch = _g++;
			var p = this.patterntable[0];
			var pp = ch * 4;
			var cmd = this.pattern[p][pp + 2] & 15;
			var data = this.pattern[p][pp + 3];
			if(cmd == 14 && (data & 240) == 0) {
				if((data & 1) == null) {
					this.filter = true;
				} else {
					this.filter = false;
				}
			}
		}
		if(this.context != null) {
			if(this.filter != null) {
				this.lowpassNode.frequency.value = 3275;
			} else {
				this.lowpassNode.frequency.value = 28867;
			}
		}
		var elements = this.channels;
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Float32Array(buffer,0);
			} else {
				this1 = new Float32Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		this.chvu = this1;
		var _g = 0;
		var _g1 = this.channels;
		while(_g < _g1) {
			var i = _g++;
			this.chvu[i] = 0.0;
		}
		return true;
	}
	,advance: function(mod) {
		var spd = mod.samplerate * 60 / mod.bpm / 4 / 6;
		if(mod.offset > spd) {
			mod.tick++;
			mod.offset = 0;
			mod.flags |= 1;
		}
		if(mod.tick >= mod.speed) {
			if(mod.patterndelay) {
				if(mod.tick < (mod.patternwait + 1) * mod.speed) {
					mod.patternwait++;
				} else {
					mod.row++;
					mod.tick = 0;
					mod.flags |= 2;
					mod.patterndelay = 0;
				}
			} else if(mod.flags & 112) {
				if(mod.flags & 64) {
					mod.row = mod.looprow;
					mod.flags &= 161;
					mod.flags |= 2;
				} else if(mod.flags & 16) {
					mod.position = mod.patternjump;
					mod.row = mod.breakrow;
					mod.patternjump = 0;
					mod.breakrow = 0;
					mod.flags &= 225;
					mod.flags |= 2;
				}
				mod.tick = 0;
			} else {
				mod.row++;
				mod.tick = 0;
				mod.flags |= 2;
			}
		}
		if(mod.row >= 64) {
			mod.position++;
			mod.row = 0;
			mod.flags |= 4;
		}
		if(mod.position >= mod.songlen) {
			if(mod.repeat) {
				mod.position = 0;
			} else {
				this.endofsong = true;
			}
			return;
		}
	}
	,mix: function(mod,bufs,buflen) {
		var f;
		var p;
		var pp;
		var n;
		var nn;
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this1 = new Float32Array(2);
		var outp = this1;
		var _g = 0;
		var _g1 = buflen;
		while(_g < _g1) {
			var s = _g++;
			outp[0] = 0.0;
			outp[1] = 0.0;
			if(!mod.paused && !mod.endofsong && mod.playing) {
				mod.advance(mod);
				var och = 0;
				var _g2 = 0;
				var _g3 = mod.channels;
				while(_g2 < _g3) {
					var ch = _g2++;
					p = mod.patterntable[mod.position];
					pp = mod.row * 4 * mod.channels + ch * 4;
					if(mod.flags & 2) {
						mod.channel[ch].command = mod.pattern[p][pp + 2] & 15;
						mod.channel[ch].data = mod.pattern[p][pp + 3];
						if(!(mod.channel[ch].command == 14 && (mod.channel[ch].data & 240) == 208)) {
							n = (mod.pattern[p][pp] & 15) << 8 | mod.pattern[p][pp + 1];
							if(n) {
								if(mod.channel[ch].command != 3 && mod.channel[ch].command != 5) {
									mod.channel[ch].period = n;
									mod.channel[ch].samplepos = 0;
									if(mod.channel[ch].vibratowave > 3) {
										mod.channel[ch].vibratopos = 0;
									}
									mod.channel[ch].flags |= 3;
									mod.channel[ch].noteon = 1;
								}
								mod.channel[ch].slideto = n;
							}
							nn = mod.pattern[p][pp] & 240 | mod.pattern[p][pp + 2] >> 4;
							if(nn) {
								mod.channel[ch].sample = nn - 1;
								mod.channel[ch].volume = mod.sample[nn - 1].volume;
								if(n && mod.channel[ch].samplepos > mod.sample[nn - 1].length) {
									mod.channel[ch].samplepos = 0;
								}
							}
						}
					}
					mod.channel[ch].voiceperiod = mod.channel[ch].period;
					if(!mod.sample[mod.channel[ch].sample].length) {
						mod.channel[ch].noteon = 0;
					}
					if(mod.flags & 1) {
						if(!mod.tick) {
							mod.effects_t0[mod.channel[ch].command](mod,ch);
						} else {
							mod.effects_t1[mod.channel[ch].command](mod,ch);
						}
					}
					if(mod.channel[ch].flags & 2) {
						var _g4 = 0;
						var _g5 = mod.baseperiodtable.length;
						while(_g4 < _g5) {
							var np = _g4++;
							if(mod.baseperiodtable[np] >= mod.channel[ch].period) {
								mod.channel[ch].note = np;
							}
						}
						mod.channel[ch].semitone = 7;
						if(mod.channel[ch].period >= 120) {
							mod.channel[ch].semitone = mod.baseperiodtable[mod.channel[ch].note] - mod.baseperiodtable[mod.channel[ch].note + 1];
						}
					}
					if((mod.channel[ch].flags & 1 || mod.flags & 2) && mod.channel[ch].voiceperiod) {
						mod.channel[ch].samplespeed = 7093789.2 / (mod.channel[ch].voiceperiod * 2) * mod.finetunetable[mod.sample[mod.channel[ch].sample].finetune + 8] / mod.samplerate;
					}
					if(mod.flags & 1) {
						mod.channel[ch].vibratopos += mod.channel[ch].vibratospeed;
						mod.channel[ch].vibratopos &= 63;
					}
					och ^= ch & 1;
					f = 0.0;
					if(mod.channel[ch].noteon) {
						if(mod.sample[mod.channel[ch].sample] && mod.sample[mod.channel[ch].sample].length > mod.channel[ch].samplepos) {
							f = mod.sample[mod.channel[ch].sample].data[Math.floor(mod.channel[ch].samplepos)] * mod.channel[ch].volume / 64.0;
						}
						outp[och] += f;
						mod.channel[ch].samplepos += mod.channel[ch].samplespeed;
					}
					mod.chvu[ch] = Math.max(mod.chvu[ch],Math.abs(f));
					if(mod.channel[ch].noteon) {
						if(mod.sample[mod.channel[ch].sample].loopstart || mod.sample[mod.channel[ch].sample].looplength) {
							if(mod.channel[ch].samplepos >= mod.sample[mod.channel[ch].sample].loopstart + mod.sample[mod.channel[ch].sample].looplength) {
								mod.channel[ch].samplepos -= mod.sample[mod.channel[ch].sample].looplength;
							}
						} else if(mod.channel[ch].samplepos >= mod.sample[mod.channel[ch].sample].length) {
							mod.channel[ch].noteon = 0;
						}
					}
					mod.channel[ch].flags = 0;
				}
				mod.offset++;
				mod.flags &= 112;
			}
			bufs[0][s] = outp[0];
			bufs[1][s] = outp[1];
		}
	}
	,effect_t0_0: function(mod,ch) {
		mod.channel[ch].arpeggio = mod.channel[ch].data;
	}
	,effect_t0_1: function(mod,ch) {
		if(mod.channel[ch].data) {
			mod.channel[ch].slidespeed = mod.channel[ch].data;
		}
	}
	,effect_t0_2: function(mod,ch) {
		if(mod.channel[ch].data) {
			mod.channel[ch].slidespeed = mod.channel[ch].data;
		}
	}
	,effect_t0_3: function(mod,ch) {
		if(mod.channel[ch].data) {
			mod.channel[ch].slidetospeed = mod.channel[ch].data;
		}
	}
	,effect_t0_4: function(mod,ch) {
		if(mod.channel[ch].data & 15 && mod.channel[ch].data & 240) {
			mod.channel[ch].vibratodepth = mod.channel[ch].data & 15;
			mod.channel[ch].vibratospeed = (mod.channel[ch].data & 240) >> 4;
		}
		mod.effects_t1[4](mod,ch);
	}
	,effect_t0_5: function(mod,ch) {
	}
	,effect_t0_6: function(mod,ch) {
	}
	,effect_t0_7: function(mod,ch) {
	}
	,effect_t0_8: function(mod,ch) {
		mod.syncqueue.unshift(mod.channel[ch].data & 15);
	}
	,effect_t0_9: function(mod,ch) {
		mod.channel[ch].samplepos = mod.channel[ch].data * 256;
	}
	,effect_t0_a: function(mod,ch) {
	}
	,effect_t0_b: function(mod,ch) {
		mod.breakrow = 0;
		mod.patternjump = mod.channel[ch].data;
		mod.flags |= 16;
	}
	,effect_t0_c: function(mod,ch) {
		mod.channel[ch].volume = mod.channel[ch].data;
	}
	,effect_t0_d: function(mod,ch) {
		mod.breakrow = ((mod.channel[ch].data & 240) >> 4) * 10 + (mod.channel[ch].data & 15);
		if(!(mod.flags & 16)) {
			mod.patternjump = mod.position + 1;
		}
		mod.flags |= 16;
	}
	,effect_t0_e: function(mod,ch) {
		var i = (mod.channel[ch].data & 240) >> 4;
		mod.effects_t0_e[i](mod,ch);
	}
	,effect_t0_f: function(mod,ch) {
		if(mod.channel[ch].data > 32) {
			mod.bpm = mod.channel[ch].data;
		} else if(mod.channel[ch].data) {
			mod.speed = mod.channel[ch].data;
		}
	}
	,effect_t0_e0: function(mod,ch) {
		if(mod.channels > 4) {
			return;
		}
		if(mod.channel[ch].data & 1) {
			mod.filter = false;
		} else {
			mod.filter = true;
		}
	}
	,effect_t0_e1: function(mod,ch) {
		mod.channel[ch].period -= mod.channel[ch].data & 15;
		if(mod.channel[ch].period < 113) {
			mod.channel[ch].period = 113;
		}
	}
	,effect_t0_e2: function(mod,ch) {
		mod.channel[ch].period += mod.channel[ch].data & 15;
		if(mod.channel[ch].period > 856) {
			mod.channel[ch].period = 856;
		}
		mod.channel[ch].flags |= 1;
	}
	,effect_t0_e3: function(mod,ch) {
	}
	,effect_t0_e4: function(mod,ch) {
		mod.channel[ch].vibratowave = mod.channel[ch].data & 7;
	}
	,effect_t0_e5: function(mod,ch) {
	}
	,effect_t0_e6: function(mod,ch) {
		if(mod.channel[ch].data & 15) {
			if(mod.loopcount != null) {
				mod.loopcount--;
			} else {
				mod.loopcount = mod.channel[ch].data & 15;
			}
			if(mod.loopcount != null) {
				mod.flags |= 64;
			}
		} else {
			mod.looprow = mod.row;
		}
	}
	,effect_t0_e7: function(mod,ch) {
	}
	,effect_t0_e8: function(mod,ch) {
		mod.syncqueue.unshift(mod.channel[ch].data & 15);
	}
	,effect_t0_e9: function(mod,ch) {
	}
	,effect_t0_ea: function(mod,ch) {
		mod.channel[ch].volume += mod.channel[ch].data & 15;
		if(mod.channel[ch].volume > 64) {
			mod.channel[ch].volume = 64;
		}
	}
	,effect_t0_eb: function(mod,ch) {
		mod.channel[ch].volume -= mod.channel[ch].data & 15;
		if(mod.channel[ch].volume < 0) {
			mod.channel[ch].volume = 0;
		}
	}
	,effect_t0_ec: function(mod,ch) {
	}
	,effect_t0_ed: function(mod,ch) {
		if(mod.tick == (mod.channel[ch].data & 15)) {
			var p = mod.patterntable[mod.position];
			var pp = mod.row * 4 * mod.channels + ch * 4;
			var n = (mod.pattern[p][pp] & 15) << 8 | mod.pattern[p][pp + 1];
			if(n) {
				mod.channel[ch].period = n;
				mod.channel[ch].voiceperiod = mod.channel[ch].period;
				mod.channel[ch].samplepos = 0;
				if(mod.channel[ch].vibratowave > 3) {
					mod.channel[ch].vibratopos = 0;
				}
				mod.channel[ch].flags |= 3;
				mod.channel[ch].noteon = 1;
			}
			n = mod.pattern[p][pp] & 240 | mod.pattern[p][pp + 2] >> 4;
			if(n) {
				mod.channel[ch].sample = n - 1;
				mod.channel[ch].volume = mod.sample[n - 1].volume;
			}
		}
	}
	,effect_t0_ee: function(mod,ch) {
		mod.patterndelay = mod.channel[ch].data & 15;
		mod.patternwait = 0;
	}
	,effect_t0_ef: function(mod,ch) {
	}
	,effect_t1_0: function(mod,ch) {
		if(mod.channel[ch].data) {
			var apn = mod.channel[ch].note;
			if(mod.tick % 3 == 1) {
				apn += mod.channel[ch].arpeggio >> 4;
			}
			if(mod.tick % 3 == 2) {
				apn += mod.channel[ch].arpeggio & 15;
			}
			if(apn >= 0 && apn <= mod.baseperiodtable.length) {
				mod.channel[ch].voiceperiod = mod.baseperiodtable[apn];
			}
			mod.channel[ch].flags |= 1;
		}
	}
	,effect_t1_1: function(mod,ch) {
		mod.channel[ch].period -= mod.channel[ch].slidespeed;
		if(mod.channel[ch].period < 113) {
			mod.channel[ch].period = 113;
		}
		mod.channel[ch].flags |= 3;
	}
	,effect_t1_2: function(mod,ch) {
		mod.channel[ch].period += mod.channel[ch].slidespeed;
		if(mod.channel[ch].period > 856) {
			mod.channel[ch].period = 856;
		}
		mod.channel[ch].flags |= 3;
	}
	,effect_t1_3: function(mod,ch) {
		if(mod.channel[ch].period < mod.channel[ch].slideto) {
			mod.channel[ch].period += mod.channel[ch].slidetospeed;
			if(mod.channel[ch].period > mod.channel[ch].slideto) {
				mod.channel[ch].period = mod.channel[ch].slideto;
			}
		}
		if(mod.channel[ch].period > mod.channel[ch].slideto) {
			mod.channel[ch].period -= mod.channel[ch].slidetospeed;
			if(mod.channel[ch].period < mod.channel[ch].slideto) {
				mod.channel[ch].period = mod.channel[ch].slideto;
			}
		}
		mod.channel[ch].flags |= 3;
	}
	,effect_t1_4: function(mod,ch) {
		var waveform = mod.vibratotable[mod.channel[ch].vibratowave & 3][mod.channel[ch].vibratopos] / 63.0;
		var a = mod.channel[ch].vibratodepth * waveform;
		mod.channel[ch].voiceperiod += a;
		mod.channel[ch].flags |= 1;
	}
	,effect_t1_5: function(mod,ch) {
		mod.effect_t1_3(mod,ch);
		mod.effect_t1_a(mod,ch);
	}
	,effect_t1_6: function(mod,ch) {
		mod.effect_t1_4(mod,ch);
		mod.effect_t1_a(mod,ch);
	}
	,effect_t1_7: function(mod,ch) {
	}
	,effect_t1_8: function(mod,ch) {
	}
	,effect_t1_9: function(mod,ch) {
	}
	,effect_t1_a: function(mod,ch) {
		if(!(mod.channel[ch].data & 15)) {
			mod.channel[ch].volume += mod.channel[ch].data >> 4;
			if(mod.channel[ch].volume > 64) {
				mod.channel[ch].volume = 64;
			}
		}
		if(!(mod.channel[ch].data & 240)) {
			mod.channel[ch].volume -= mod.channel[ch].data & 15;
			if(mod.channel[ch].volume < 0) {
				mod.channel[ch].volume = 0;
			}
		}
	}
	,effect_t1_b: function(mod,ch) {
	}
	,effect_t1_c: function(mod,ch) {
	}
	,effect_t1_d: function(mod,ch) {
	}
	,effect_t1_e: function(mod,ch) {
		var i = (mod.channel[ch].data & 240) >> 4;
		mod.effects_t1_e[i](mod,ch);
	}
	,effect_t1_f: function(mod,ch) {
	}
	,effect_t1_e0: function(mod,ch) {
	}
	,effect_t1_e1: function(mod,ch) {
	}
	,effect_t1_e2: function(mod,ch) {
	}
	,effect_t1_e3: function(mod,ch) {
	}
	,effect_t1_e4: function(mod,ch) {
	}
	,effect_t1_e5: function(mod,ch) {
	}
	,effect_t1_e6: function(mod,ch) {
	}
	,effect_t1_e7: function(mod,ch) {
	}
	,effect_t1_e8: function(mod,ch) {
	}
	,effect_t1_e9: function(mod,ch) {
		if(mod.tick % (mod.channel[ch].data & 15) == 0) {
			mod.channel[ch].samplepos = 0;
		}
	}
	,effect_t1_ea: function(mod,ch) {
	}
	,effect_t1_eb: function(mod,ch) {
	}
	,effect_t1_ec: function(mod,ch) {
		if(mod.tick == (mod.channel[ch].data & 15)) {
			mod.channel[ch].volume = 0;
		}
	}
	,effect_t1_ed: function(mod,ch) {
		mod.effect_t0_ed(mod,ch);
	}
	,effect_t1_ee: function(mod,ch) {
	}
	,effect_t1_ef: function(mod,ch) {
	}
};
var hxmod_utils_TAError = $hxEnums["hxmod.utils.TAError"] = { __ename__:true,__constructs__:null
	,RangeError: {_hx_name:"RangeError",_hx_index:0,__enum__:"hxmod.utils.TAError",toString:$estr}
};
hxmod_utils_TAError.__constructs__ = [hxmod_utils_TAError.RangeError];
var hxmod_utils_Float32Array = {};
hxmod_utils_Float32Array.toArrayBufferView = function(this1) {
	return this1;
};
hxmod_utils_Float32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
hxmod_utils_Float32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
hxmod_utils_Float32Array.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var hxmod_utils_UInt8Array = {};
hxmod_utils_UInt8Array.toArrayBufferView = function(this1) {
	return this1;
};
hxmod_utils_UInt8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
hxmod_utils_UInt8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
hxmod_utils_UInt8Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
hxmod_utils_Float32Array.BYTES_PER_ELEMENT = 4;
hxmod_utils_UInt8Array.BYTES_PER_ELEMENT = 1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=modplayerhx.js.map